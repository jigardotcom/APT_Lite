% AST_PROCESS_FO() - Process events for the minigame FaceOff, extracting behavioural data 
%                   and updating EEG.event as appropriate.
% 				
% Usage:
%	>> [UpdatedEvent,FOBehData,logstr] = ast_process_fo(Event,CurrentExpLogIndex);
% 	else
%	>> [UpdatedEvent,FOBehData,logstr,EEGIndex] = ast_process_fo(Event,CurrentExpLogIndex,...
%															'key1','val1',...);
% 
% Inputs:
% 	Event				= the event from ExpLog to process
% 	
% 	CurrentExpLogIndex	= the current index in ExpLog
% 
% 	(optional)
% 	'EEGIndex'	= the current index in EEG.event
%                       {default is empty = no EEG}
% 
%   'log'               = 'on'|'off' if 'on', return a string to write to a
%                       log file, otherwise do nothing
%                       {default is empty == off}
%
% Output:
%   UpdatedEvent        = the event from ExpLog with code and name updated
%
%   newEEGIndex         = the current index in EEG after processing
%
%   logstr              = the string to log
% 
% Precondition: Event is a structure of the form generated by MakeStructure
% Precondition: If EEGIndex is supplied, there exists an instance of EEG with a valid
% 					event channel.
% 
% see also: ast_process.m, ast_process_md.m, ast_process_sj.m,
% ast_process_sp.m, ast_process_as.m
% 
% Author: Keith Yoder
% Copyright (c) 2010 Cornell University

% This program is free software; you can redistribute it and/or
% modify it under the terms of the GNU General Public License
% as published by the Free Software Foundation; either version 2
% of the License, or (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.


function [UpdatedEvent FOBehData logstr newEEGIndex] = ast_process_fo(Event, CurrentExpLogIndex, varargin)
global EXPLOG
% initialize variables
EEGIndex = []; % empty unless EEGIndex is provided - then then current index in EEG
newEEGIndex = []; % empty unless EEGIndex was provided - then the index of the processed code in EEG
logtoggle = []; % 0 if 'off', 1 if 'on'
logstr = []; % holds the string to log
P=1; % 1 if given code should be updated, 0 otherwise

UpdatedEvent = Event;
Code = Event.code;
Name = Event.name;
ExpLogIndex = CurrentExpLogIndex;

% FOBehData holds the behavioural data for FaceOff
%     Total number of placements                 (Placements)
%     Time between face appearance and placement (Lat)
FOBehData = struct('Placements',0,'Lat',0);
FOBehData.Placements = []; % holds the total number of placements per board
FOBehData.Lat = []; % holds latency between last face appearance and placement on game board

v=0;
% inv: varargin(1..v) have been examined and stored in the appropriate
% local variable
while v<length(varargin)
    v=v+1;
    if isequal(varargin{v},'EEGIndex'),v=v+1;EEGIndex = varargin{v}; end;
    if isequal(varargin{v},'log'),v=v+1;logtoggle = varargin{v}; end;
end

% if logtoggle is set to 'on', replace logtoggle with 1
if ~isempty(logtoggle) && strcmp(logtoggle,'on')
    logtoggle = 1;
else % otherwise set logtoggle to 0
    logtoggle = 0;
end

% if Name is a cell, extract the data from within the cell
% ASSERT: if Name is a cell, data within it is type 'char'
if iscell(Name)
    Name = Name{1};
end

% if Code is a cell, extract the data from within the cell
% ASSERT: if Code is a cell, data within it is type 'double'
if iscell(Code)
    Code = Code{1};
end
% if code is multiple of 1000, return  (0 codes do not appear in EEG file)
if mod(Code,1000)==0;
    if ~isempty(varargin)
        newEEGIndex=EEGIndex;
        % if logtoggle is 'on', return a string to log
        if logtoggle
            logstr = sprintf('Code %d at %d in ExpLog ends in 0 - EEG not updated\n',...
                Code,ExpLogIndex);
        end
    end
    P=0;
end

%if EEG exists, update the code and name
if P && ~isempty(EEGIndex)
    newEEGIndex = EEGIndex;

    % update the 2-digit code in EEG.event to the 4-digit code in ExpLog
    EEGEventsIndex = ast_searcheeg(Code-5000,newEEGIndex);
    % if Code is not found (e.g. EEGEventsIndex == -1), skip it
    if EEGEventsIndex==-1
        fprintf('Skipping code %d:%s\n',Code,Name);
        % if logtoggle is 'on', return a string to log
        if logtoggle
            logstr = sprintf('Skipping code %d:%s\n',Code,Name);
        end
        P=0;
    else % otherwise update the event in EEG
        % if the event is an 'ignore' event, remove it from EEG.event,
        % decrease the newEEGIndex by 1, and do not process the code
        if strncmpi(Name,'ignore',6)
            P=0;
            EEGEventsIndex = EEGEventsIndex - 1;
            removeTest = ast_removeevent(EEGEventsIndex);
            if removeTest==0
                error('astropolis:ast_process_md:RemoveEventFail',...
                    'Attempted to remove %d from EEG.event(%d)\n',...
                Code,EEGEventsIndex);
            end
        end
        newEEGIndex = EEGEventsIndex;
    end
end
% process the code
if P
switch Code
        

    %{
        LOGICAL EVENTS
    %}
    case 5001 % FO_START | FO_INPUT_MouseClicked_X=???_Y=???
        
    case 5002 % FO_START_BOARD=? | FO_INPUT_MouseReleased
        
    case 5003 % FO_FACELOAD_Cell=?
        
    case 5004 % FO_FACELOADED_Cell=?_Category=?str?
        
    case 5005 % FO_FACEDRAG_X=???_Y=???
        
    case 5006 % FO_BOARDFILL_X=???_Y_=???
        
    case 5008 % FO_CORRECT_GROUP=?str?
        
    case 5009 % FO_INCORRECT_GROUP=?str?
    
        
end % switch end
         
end

% if EEG exists update the event structure
if ~isempty(EEGIndex)
    %replace the code in EEG.events with its new value
    ast_updateEvent(newEEGIndex,UpdatedEvent.code,'name',UpdatedEvent.name);
end

% if logtoggle is 'on' and a logstr has not been set, update logstr to the new
% code
if logtoggle && isempty(logstr)
    % if either Event.code, UpdatedEvent.code or UpdatedEvent.name is a
    % cell, extract the data contained within
    if iscell(Code)
        Code = Code{1};
    end
    if iscell(UpdatedEvent.code)
        UpdatedEvent.code = UpdatedEvent.code{1};
    end
    if iscell(UpdatedEvent.name)
        UpdatedEvent.name = UpdatedEvent.name{1};
    end
    logstr = sprintf('Event at %d (%d) replaced by %d\t%s\n',...
       ExpLogIndex,Code,UpdatedEvent.code,UpdatedEvent.name);
end
