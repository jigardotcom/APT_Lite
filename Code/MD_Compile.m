% MD_COMPILE() - Compile behavioural results for the minigame Maritime Defender
%
% This function takes the internal ExpLogStructure and the MinigameIndices
% generated by ast_makestructure.m and gives the behavioral outputs for
% Maritime Defender minigame for the specified subject in one comma
% separated file (.csv file). 
%                                                    
% USAGE:                                 
% >>  [MDBehData Output] = MD_CompileV2(ExpLogStructure,MinigameIndices,filepath)
%
% INPUTS:
% 
%   ExpLogStructure: generated from ast_makestructure.m containing four
%                    structures - code (four digit event code), time (time of the event),
%                    mark (tick mark), and name (the event string reported).
%   
%   MinigameIndices: For each minigame session it records in its structure
%                    the name of the minigame, start and end of the minigame (the line
%                    numbers in the corresponding ExpLogStructure file)
%                                                                 
%   filepath: the file path obtained from user for saving the .csv result file  
%
% OUTPUTS: 
% MDBehData = holds the following behavioral data for Maritime Defender
%     Go Accuracy   (GAcc)
%     Go Latency    (GLat)
%     NoGo Accuracy (NGAcc)
%     NoGo Latency  (NGLat)
%     DotCoherence  (DotCoh)
% 
% Output  = string that holds the path of the .csv file. 
%
% First part of the csv file has the following headers
%  Test_Type,Test_Result,Reaction_Time(s),Event_Letency(s)
%    Test_Type: Go or No-Go trial
%    Test_Result:      Success or Failure
%    Reaction_Time(s): Reaction time given in seconds.
%    Event_Latency(s): The latency of the event's occurrence from beginning 
%                      of the game log session 
%   
% Second part collects the mean and standard deviations for the go and
% no-go trials as well as the dot trials.
%
% Third part collects the data regarding Dot coherence trials like success,
% failure and misses as well as accuracy and reaction times. Also, the mean
% and std for reaction times of successfull trials, failed trials and
% missed trials are printed. 
%
% Finally, D' value for the Go/No-Go trials is displayed
%
% PRECONDITION: ExpLogStructure considered here is the one that is 
%               generated by ast_makestructure.m BUT NOT already processed
%               by ast_process.m
%  
% see also: APT_Lite.m

% Changelog 26-May-2012 ( Jigar Patel)
% - D' (D Prime) is now being calculated
% - dot coherence threshold estimate


% Authors: Rakesh Sengupta (RS), Aditya Hiran (AH), Jigar Patel (JP)
% 2011 University of Hyderabad
 
% This program is free software; you can redistribute it and/or
% modify it under the terms of the GNU General Public License
% as published by the Free Software Foundation; either version 2
% of the License, or (at your option) any later version.
 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,
% USA.


function [MDBehData Output] = MD_Compile(ExpLogStructure,MinigameIndices,filepath)



% List of Event Codes used in this program with their descriptions: 
% 1022 - MD_ShooterPResentEnemy
% 1027 - MD_ShooterEnemyWeaponFired
% 1024 - MD_ShooterActivateFireWeapon
% 1017 - MD_ShooterActivateMovePort
% 1019 - MD_ShooterActivateMoveStarboard
% 1021 - MD_ShooterPResentFriendly
% 1028 - MD_ShooterCollectibleSpawned


ExpLog = ExpLogStructure;      % ExpLog is a structure containing the log data. 
                               % The structure has four elements i.e.
                               % EventTime, EventMark, EventCode, EventName 

Res = fopen(filepath,'w');     % Creats the Result file


fprintf(Res,'Test_Type,Test_Result,Reaction_Time(s),Event_Letency(s) \n');     % Prints the Headings into Result File

MD = []; % MD = [Test_Type Test_Result Reaction_Time Latency];  % holds information of all trials in N x [Test_Type Test_Result Reaction_Time Latency] format where N is total number of trials
         % Test type codes 1: Go, 2: NoGo, 3: Dot
         % Test Results Codes 1:Success, 2:Miss, 3: False Alarm, 4: Correct
         % Rejection
MDCount = 1;
%##### 

%{
MDBehData holds the behavioral data for Maritime Defender
    Go Accuracy (GAcc)
    Go Latency  (GLat)
    NoGo Accuracy (NGAcc)
    NoGo Latency  (NGLat)
    DotCoherence     (DotCoh)
%}
MDBehData = struct('MD_TRIALS',0,'GAcc',0,'NGAcc',0,'DPrime',0);
MDBehData.MD_TRIALS = []; % holds information of all trials in N x [Test_Type Test_Result Reaction_Time Latency] format where N is total number of trials
MDBehData.GAcc = []; % holds responses(Go): 1 for correct, 0 for incorrect
MDBehData.NGAcc = []; % holds responses(No-Go): 1 for correct, 0 for incorrect
MDBehData.DPrime = []; % D' Value for Go / No-Go Trials
%#####

Threshold = 0;

% Task is used to denote the type of the trial i.e. Go, NoGo or Dot
% Result is used to denote whether the trial is a success, a failure or a miss
% RT is used to denote the Reaction time


%From each minigame session get the Maritime Defender minigames on which
%to run the behavioral analysis for their start and end points defined by
%istart and iend which define in which line of ExpLog this particular
%minigame session started and ended.

for j=1:size(MinigameIndices,2)
    if(  strcmp(MinigameIndices(1,j).game,'MaritimeDefender')==1)
        istart=MinigameIndices(1,j).start;
        iend=MinigameIndices(1,j).end;
        
        
        for i=istart:iend                  % Loop over the particular minigame session
            
            if( ExpLog(1,i).code == 1022 )              % Look for event code when an enemy appears
                
                Lat = ExpLog(1,i).time;                 % Note the Latency value
                K = i ;                                 % Stores the index where the event 22 has occured which is later useful for computing the Reaction time
                
                while i<iend && ~(ExpLog(1,i).code== 1027 || ExpLog(1,i).code == 1024 || ExpLog(1,i).code == 1017 ||ExpLog(1,i).code == 1019) % Look for the events where player/enemy fires or moves
                    i=i+1;
                end
                
                if((ExpLog(1,i).time-ExpLog(1,K).time) >= 5 )   % If the event 21 is not followed by 28 or 24 within 5 seconds then it is a GoFail
                    
                    RT = ExpLog(1,i).time-ExpLog(1,K).time; % Note the Reaction time
                    MD(MDCount,:) = [1 2 RT Lat];
                    MDCount = MDCount +1 ;
                else
                    
                    if( ExpLog(i).code == 1027 )        % If enemy fires ( Event code 27 ) then its GoFAIL otherwise GoSUCCEED
                        RT = (ExpLog(1,i).time)-(ExpLog(1,K).time); % Note the Reaction time
                        MD(MDCount,:) = [1 2 RT Lat];
                        MDCount = MDCount +1 ;
                        
                    else
                        
                        RT = ExpLog(1,i).time-ExpLog(1,K).time; % Note the Reaction time
                        MD(MDCount,:) = [1 1 RT Lat];
                        MDCount = MDCount +1 ;
                    end
                end
            end
            
            if(ExpLog(1,i).code == 1021 )           % Look for event code when friendly ship appears
                
                Lat = ExpLog(1,i).time;             % Note the Latency value
                K = i;                              % Stores the index where the event 21 has occured which is later useful for computing the Reaction time
                
                while i<iend && ~(ExpLog(1,i).code== 1028 || ExpLog(i).code == 1024 ) % Look for the event code where player fires or collect cargo
                    i=i+1;
                end
                
                if((ExpLog(1,i).time-ExpLog(1,K).time) >= 5 )   % If the event 21 is not followed by 28 or 24 within 5 seconds then it is a NoGoSUCCEED
                    RT = ExpLog(1,i).time-ExpLog(1,K).time; % Note the Reaction time
                    MD(MDCount,:) = [2 4 RT Lat];
                    MDCount = MDCount +1 ;
                    
                else                                % If the event 21 is followed by the event 28 or 24 within 5 seconds
                    
                    if(ExpLog(1,i).code == 1028 )           % If player collects cargo (i.e. event 28 has occured) then it is a success otherwise failure
                        RT = ExpLog(1,i).time-ExpLog(1,K).time; % Note the Reaction time
                        MD(MDCount,:) = [2 4 RT Lat];
                        MDCount = MDCount +1 ;
                        
                    else                                % If event 21 is followed by event 24 within the next 5 seconds
                        
                        RT = ExpLog(1,i).time-ExpLog(1,K).time; % Note the Reaction time
                        MD(MDCount,:) = [2 3 RT Lat];
                        MDCount = MDCount +1 ;
                        %
                    end
                end
            end
            
            if(ExpLog(i).code == 1002 ) % Look for the Dot Trials (event code for the Dot trials is 2) in the experiment log file
                
                Lat =ExpLog(1,i).time; % Note the Latency value
                K = i;               % Stores the index where the event 2 has occured which is later useful for computing the Reaction time
                
                dotsDirection = regexp(ExpLog(1,i).name{1},'(?<=n=).*$','match');    % From Keith's Code (ast_process_MD.m) - Get the direction of the dots
                
                Response = regexp(ExpLog(1,i+1).name{1},'(?<=nd).*$','match');       % From Keith's code (ast_process_MD.m) - Get Response direction
                Ti = strfind(ExpLog(1,i).name{1},'=');
                Threshold = str2double(substr(ExpLog(1,i).name{1},Ti(1,1)+1,5));% Excracts the Dot coherence Threshold
                
                
                if ~length(Response)==0         % If there is a Response from the user that is not NULL
                    
                    if strcmpi(dotsDirection,Response)  % If the Response is the same as direction of the dots then it is a Dot-trial Success
                        
                        RT = ExpLog(1,i+1).time-ExpLog(1,K).time;   % Note the Reaction timek
                        MD(MDCount,:) = [3 1 RT Lat];
                        MDCount = MDCount +1 ;
                        
                    else                                % If the Response is different from the direction of the dots then it is a Dot-trial Failure
                        
                        RT = ExpLog(1,i+1).time-ExpLog(1,K).time;   % Note the Reaction time
                        MD(MDCount,:) = [3 3 RT Lat];
                        MDCount = MDCount +1 ;
                        
                    end
                    
                else                            % If there is no Response from the user then it is counted as a Miss
                    
                    RT = ExpLog(1,i+1).time-ExpLog(1,K).time;   % Note the Reaction time
                    MD(MDCount,:) = [3 2 RT Lat];
                    MDCount = MDCount +1 ;
                    
                end
                
            end
            
            
        end
    end
end
MD_Trials = MDCount - 1;

for i = 1:MD_Trials
    
    switch(MD(i,1))
        case 1
            fwrite(Res,'Go');
        case 2
            fwrite(Res,'NoGo');
        case 3
            fwrite(Res,'Dot Trial');
    end
    
    fprintf(Res,',');
    
    switch(MD(i,2))
        case 1
            fwrite(Res,'Hit');
        case 2
            fwrite(Res,'Miss');
        case 3
            fwrite(Res,'False_Alarm');
        case 4
            fwrite(Res,'Correct Rejection');
    end
    
    fprintf(Res,',');
    fwrite(Res,IsNumber(MD(i,3)));
    fprintf(Res,',');
    fwrite(Res,IsNumber(MD(i,4)));
    fprintf(Res,'\n');
    
end


GoIndex = MD(:,1) == 1; % get indecies where the GTo event occures
NoGoIndex = MD(:,1)==2; % similarly, to NoGO
DotIndex = MD(:,1) ==3; % and for Dot Trials

HitIndex = MD(:,2)==1;  % indices for Hits
MissIndex = MD(:,2)==2; % Misses
FAIndex = MD(:,2)==3;   % False Alarms
CRIndex = MD(:,2)==4;   % Correct Rejections

GoHitIndex = (HitIndex + GoIndex)==2;       % Indecies for Hits in Go events 
GoMissIndex = (MissIndex + GoIndex) ==2;    % Indecies for Misses in Go events 
NoGoFAIndex = (FAIndex + NoGoIndex)==2;     % Indecies for Hits in NoGo events 
NoGoCRIndex = (CRIndex + NoGoIndex)==2;     % Indecies for Misses in Go events 

Hits = sum(GoHitIndex);     % Total Hits
Misses = sum(GoMissIndex);  % Total Misses
FA = sum(NoGoFAIndex);      % Total False Alarms
CR = sum(NoGoCRIndex);      % Total Correct Rejections

TotalGo = sum(GoIndex); % Total Go Trials
TotalNoGo = sum(NoGoIndex);  % Total NoGo Trials

GoRTHits = MD(GoHitIndex,3);    % Reaction times for Hits
RTMisses = MD(GoMissIndex,3);   % Reaction times for Misses
RTFA = MD(NoGoFAIndex,3);       % Reaction times for False Alarms
RTCR = MD(NoGoCRIndex,3);       % Reaction times for Correct Rejections

DotSuccessIndex = (DotIndex + HitIndex)==2; % Indecies for Hits in Dot Trials
DotMissIndex = (DotIndex + MissIndex)==2;   % Indecies for Misses in Dot Trials
DotFAIndex = (DotIndex + FAIndex)==2;       % Indecies for False Alarms in Dot Trials
TotalDotTrials = sum(DotIndex);

DotHits = sum(DotSuccessIndex); % Total Hits in Dot Trials
DotMisses = sum(DotMissIndex);  % Total Misses in Dot Trials
DotFA = sum(DotFAIndex);        % Total False Alarms in Dot Trials

RTDotSuccess = MD(DotSuccessIndex,3);   % Reaction times for Hits in Dot Trials
RTDotMiss = MD(DotMissIndex,3);         % Reaction times for Misses in Dot Trials
RTDotFA = MD(DotFAIndex,3);             % Reaction times for False Alarms in Dot Trials
%
fprintf(Res,'\n\nBehavioral Stats');    % Analysis on all trials
fprintf(Res,'\n\n');
%
fprintf(Res,'Go Trials\n\n');
fprintf(Res,'Total Go Trials:,');                     % Prints the total no. of Go trials
fwrite(Res,num2str(TotalGo));
%
fprintf(Res,'\nSucceessful Go Trials(Hits):,');
fwrite(Res,num2str(Hits));                       % Prints the no. of succeeded Go trials
% fprintf(Res,',HITS\n');
fprintf(Res,'\nFailed Go Trials (Misses) :,');                    % Prints the no. of failed Go trials
fwrite(Res,num2str(Misses));
% fprintf(Res,',MISSES\n');
%


% %HitRate = GoSucceed/(GoSucceed+GoFail);
%
fprintf(Res,'\nAccuracy for the Go trial:,')     ;     % Analysis of the accuracies computed for the three types of trails i.e. Go, NoGo and dot
fwrite(Res,num2str(Hits/(Hits+Misses)));    % Prints the no. of succeeded Go trials
MDBehData.GAcc = Hits/(Hits+Misses);
%
%
%
fprintf(Res,'\n\nMean and variance of RT for successful Go Trials:,');
if(Hits~=0)
    fwrite(Res,num2str(mean(GoRTHits)));       % Prints the mean of succeeded Go trials
    %     MDBehData.GLat.Mean = Total_RT_GS/GoSucceed;
    fprintf(Res,',');
    fwrite(Res,num2str(var(GoRTHits)));
    %     fwrite(Res,num2str(var_GS/(GoSucceed-1)));        % Prints the variance of succeeded Go trials
    %     MDBehData.GLat.Variance = var_GS/(GoSucceed-1);
else
    %     fprintf(Res,'No such events');
end
%
fprintf(Res,'\nMean and variance of RT for Failed Go Trials:,');
if(Misses~=0)
    fwrite(Res,num2str(mean(RTMisses)));          % Prints the mean of failed Go trials
    fprintf(Res,',');
    fwrite(Res,num2str(var(RTMisses)));           % Prints the variance of failed Go trials
else
    %     fprintf(Res,'No such events');
end
%
fprintf(Res,'\n\n\nNoGo Trials\n\n');
fprintf(Res,'Total NoGo Trials:,');                   % Prints the total no. of Go trials
fwrite(Res,num2str(TotalNoGo));
%
fprintf(Res,'\nSucceessful NoGo Trials(Correct Rejections):,');
fwrite(Res,num2str(CR));                     % Prints the no. of succeeded NoGo trials
%fprintf(Res,',');
fprintf(Res,'\nFailed NoGo Trials(False Alarms):,');                            % Prints the no. of failed NoGo trials
fwrite(Res,num2str(FA));
% fprintf(Res,',FALSE ALARMS\n');
%

%
fprintf(Res,'\nAccuracy for the NoGo trial:,');
fwrite(Res,num2str(CR/(CR+FA)));   % Prints Accuracy for the NoGo trial
MDBehData.NGAcc= CR/(CR+FA);

fprintf(Res,'\n\nMean and variance of RT for successful NoGo Trials:,');
if(CR~=0)
    fwrite(Res,num2str(mean(RTCR)));          % Prints the mean of succeeded NoGo trials
    fprintf(Res,',');
    fwrite(Res,num2str(var(RTCR)));           % Prints the variance of succeeded Go trials
else
    fprintf(Res,'No such events');
end
%
fprintf(Res,'\nMean and variance of RT for Failed NoGo events:,');
if(FA~=0)
    fwrite(Res,num2str(mean(RTFA)));                 %Prints the mean of failed NoGo trials
    fprintf(Res,',');
    fwrite(Res,num2str(var(RTFA)));                       %Prints the variance of failed NoGo trials
    
else
    fprintf(Res,'No such events');
end


% % D' Calculation:
if(Hits ==0)
    Hits = 1;
end
if(Misses ==0)
    Misses = 1;
end

HitRate = Hits / (Hits + Misses);

if(FA ==0)
    FA = 1;
end
if(CR ==0)
    CR = 1;
end

FARate = FA / (FA + CR);

MDBehData.DPrime = icdf('Normal',HitRate,0,1) - icdf('Normal',FARate,0,1);

fprintf(Res,'\n\n');
fprintf(Res,'D-Prime for Go-NoGo trials:,');
fwrite(Res,num2str(MDBehData.DPrime));
%
%
%
fprintf(Res,'\n\n\nDot Trials\n\n');
fprintf(Res,'Total Dot Trials:,');                      % Prints the total no. of Go trials
fwrite(Res,num2str(TotalDotTrials));
%
fprintf(Res,'\nsuccessful Dot Trials:,');                % Prints the no. of succeeded Dot trials
fwrite(Res,num2str(DotHits));
fprintf(Res,'\n');
fprintf(Res,'Failed Dot Trials:,');                     % Prints the no. of failed Dot trials
fwrite(Res,num2str(DotFA));
fprintf(Res,'\n');
fprintf(Res,'Missed Dot Trials:,');                     % Prints the no. of missed Dot trials
fwrite(Res,num2str(DotMisses));

fprintf(Res,'\n\nAccuracy for the Dot trials:,');
fwrite(Res,num2str(DotHits/(DotHits+DotFA+DotMisses)));             % Prints Accuracy for the Dot trials:

fprintf(Res,'\n\nCoherence perceptual threshold (Latest value):,');
fwrite(Res,num2str(Threshold));                                  % Prints coherence perceptual threshold for the Dot trials (the Latest value):



MDBehData.MD_TRIALS = MD; % holds information of all trials in N x [Test_Type Test_Result Reaction_Time Latency] format where N is total number of trials

X = fclose(Res);                                    % Close the Result file
Output = strcat('The Results of MD minigame have been saved at: ',filepath);        % Print a text to show that the program got executed successfully
