% SP_COMPILE() - Compile behavioural results for the minigame Stellar
%                Prospector
%
% This function takes the internal ExpLogStructure and the MinigameIndices
% generated by ast_makestructure.m and gives the behavioural outputs for
% Stellar Prospector minigame for the specified subject in one comma
% separated file (.csv file).
%                                                    
% USAGE:                                 
% >> [SPBehData Output] = SP_CompileV2(ExpLogStructure,MinigameIndices,filepath)
%
% INPUTS:
% 
%   ExpLogStructure: generated from ast_makestructure.m containing four
%                    structures - code (four digit event code), time (time of the event),
%                    mark (tick mark), and name (the event string reported).
%   
%   MinigameIndices: For each minigame session it records in its structure
%                    the name of the minigame, start and end of the minigame (the line
%                    numbers in the corresponding ExpLogStructure file)
%                                                                 
%   filepath: the file path obtained from user for saving the .csv result file   
%
% OUTPUT: 
% First part of the csv file will list trial-by-trial data for different phases of the minigame.
% the data contains following details, 
%  Test_Type, Test_Result, Reaction_Time(s), Event_Latency(s), Cued_or_Non-Cued,
%  Sector_Number,Cued Sector X, Y, r, theta, Difference 
% Where,
%   Test_Type:      Peripheral or central event
%   Test_Result:    Success or Failure
%   Reaction_Time(s): Reaction time given in seconds.
%   Event_Latency(s): The latency of the event's occurence from beginning of the game log session 
%   Cued_or_Non_Cued: Whether the peripheral event was cued or not. N/A for
%                     central event
%   Sector_Number: Sector number where the peripheral stimulus was spawned.
%   Cued_Sector:    Sector Number which is currently cued.
%   X,Y:           Coordinates of the peripheral stimulus spawned
%   r, theta:      Polar coordinates of the peripheral stimulus
%   Difference: absolute value of the difference between the stimulus's Theta, 
%               and the Theta that runs along the centre of the cued sector
%               (-3Pi/8, -Pi/8, Pi/8, 3Pi/8; in general the formula is
%               Sector*Pi/4 - 3Pi/8)  
%
% Second part of the csv file gives phase-wise and phase 2 & 3 pooled,  
% mean and standard deviations and accuracy values for the reaction times
% for different kinds of events. 
%
% Third part of the csv file gives the D' (D-Prime) values for Phase 2 and
% Phase 3 separately for Cued and Non-Cued Events. Also, it lists out the
% regression coefficients of reaction time against the stimulus's r (its
% distance from  fixation) and against the absolute value of the difference
% between the stimulus's Theta and the Theta that runs along the centre of
% the cued sector.   
%
% PRECONDITION: ExpLogStructure considered here is the one that is 
%               generated by ast_makestructure.m BUT NOT already processed
%               by ast_process.m
%  
% see also: APT_Lite.m
%


% Changelog 26-May-2012 ( Jigar Patel)

% - modified program structure so that all data is now being stored in
%   different arrays/cells before printing them out into a .csv file
% - Added Support to the following features
% 	- Classification of SP_DistractorSpawn
% 	- Computing and listing out for each of the three phases separately, and also for phases 2 and 3 pooled, without phase 1:
% 		- Trial-by-trial values, mean, and standard deviation of:
% 			1. Reaction times to central stimuli
% 			2. Reaction times to validly cued peripheral stimuli
% 			3. Reaction times to all invalidly cued peripheral stimuli 
% 	- computing multiple regression coefficients of reaction time against the stimulus's r (its distance from  fixation) and against the absolute value of the difference between the stimulus's Theta and the Theta that runs along the centre of the cued sector.
% 	- computing statistical significances for these regression coefficients
% 	- For the peripheral stimuli only (not the central stimuli), in Phases 2 and 3 only (exlcuding Phase 1), in two separate computations one for the currently cued sector and the other for the currently uncued sectors, compute d' ("d prime") using the tallies of hits, correct rejections, false alarms and misses.
        
 % Authors: Rakesh Sengupta (RS), Aditya Hiran (AH), Jigar Patel (JP)
% 2011 University of Hyderabad
 
% This program is free software; you can redistribute it and/or
% modify it under the terms of the GNU General Public License
% as published by the Free Software Foundation; either version 2
% of the License, or (at your option) any later version.

% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,
% USA.




function [SPBehData Output] = SP_Compile(ExpLogStructure,MinigameIndices,filepath)


% Import the ExpLogStructure in a variable.
% The structure has four elements i.e.
% EventTime, EventMark, EventCode, EventName

ExpLog=ExpLogStructure;


Res = fopen(filepath,'w');     % Creates the Result file


% The following variables will be in array datastructure and store
% different parameters pertaining to the individual trials.
% Each variable is stored in an array of size n x 3, where n = number of
% trials and Row numbers 1-2-3 indicate the phase of the minigame.

Test_Type = [];     % Test Type [ Code 1: Central, 2: Peripheral ]
Test_Result = [];   % Test Result [Codes 1: Success, 2:Miss,  3: False Alarm, 4: Correct Rejection, 5: Response Error ]
RT = [];            % Reaction Times
Latency = [];       % Latency
Cued = [];          % Cued/NonCued event indicator [Code 1:Cued 0:NonCued]
Sector = [];        % Sector of Stimuli
Cued_Sector = [];   % Indicator whether sector is cued or noncued.[Code 1:Cued 0:NonCued]
X = [];             % X co-ordinate of the stimulus
Y = [];             % Y co-ordinate of the stimulus
r = [];             % Radius of the stimulus
Theta = [];         % Angle (Theta) of the stimulus
Distance = [];      % Distance of stimulus from the center

Count = 1;          % Trial Count, initialised to 1,
Phase = 1;          % Phase No., initialised to 1,
%#################

% Counters for storing lengths of different phases, initiliased to 1. 
% These are updated upon completion of the phase. 
% Useful for printing the data to the csv files.
LenPhase1 = 1;
LenPhase2 = 1;
LenPhase3 = 1;

%#################

% Flags for Phases which set to 1 if that phase was played in game.
Phase1_Flag = 0;
Phase2_Flag = 0;
Phase3_Flag = 0;

% %{
% SPBehData holds the behavioural data for Stellar Prospector
%     Cued Peripheral Response Accuracy 		(PAccC)
%     Cued Peripheral Response Latency  		(PLatC)
%     Non-Cued Peripheral Response Accuracy	(PAccN)
%     Non-Cued Peripheral Response Latency	(PLatN)
%     Central Response Accuracy    			(CAcc)
%     Central Response Latency     			(CLat)
% %}
% SPBehData = struct('PAccC',0,'PLatC',0,'PAccN',0,'PLatN',0,'CAcc',0,'CLat',0);
% SPBehData.PAccC = []; % holds cued, peripheral responses: 1 for correct, 0 for incorrect
% SPBehData.PLatC = []; % holds latency for each cued, peripheral response
% SPBehData.PAccN = []; % holds non-cued, peripheral responses: 1 for correct, 0 for incorrect
% SPBehData.PLatN = []; % holds latency for each non-cued, peripheral response
% SPBehData.CAcc = []; % holds central responses: 1 for correct, 0 for incorrect
% SPBehData.CLat = []; % holds latency for each central response
% 
% UPDATE: The updated version is designed and created at end of processing.

%######################

% From each minigame session get the Stellar Prospector minigames on which
% to run the behavioural analysis for their start and end points defined by
% istart and iend which define in which line of ExpLog this particular
% minigame session started and ended.

for j=1:size(MinigameIndices,2)
    % inv: MinigameIndices[1..j-1] have been processed
    if( strcmp(MinigameIndices(1,j).game,'StellarProspector')==1) % Check for SP minigame
        istart=MinigameIndices(1,j).start;
        iend=MinigameIndices(1,j).end;
        
        
        for i=istart:iend    % Loop over the particular minigame session
            % inv: EXPLOG[istart:i] have been processed
            
            % Detecting Start of a Phase
            
            % The LenPhase variables are used to keep track of number of
            % trials per respective phases of SP minigame. These variables also
            % serve as Index values of array datastructure that
            % store different parameters pertaining to the individual
            % trials. Thus, when the subsequent session of minigame begins, 
            % the trials from different phases will be stored after the trials 
            % from the last session rather than overwriting them.
            
             if(ExpLog(1,i).code == 3009) % SP_Phase1Begin
                Phase = 1;          % Set Phase as 1
                Count = LenPhase1;  % Reset Count to the current length of phase 1 so that the new trials would be stored after the trials of the previous session.
                Phase1_Flag = 1;
             end
            
              if(ExpLog(1,i).code == 3010) % SP_Phase2Begin
                Phase = 2;          % Set Phase as 2
                LenPhase1 = Count;  % when phase 2 begins, it signals the end of phase 1 and the accumulated trial count is taken as the length of phase 1
                Count = LenPhase2;  % Reset Count to the current length of phase 2 so that the new trials would be stored after the trials of the previous session.
                Phase2_Flag = 1;
              end
            
               if(ExpLog(1,i).code == 3011) % SP_Phase3Begin
                Phase = 3;          % Set Phase as 3
                LenPhase2 = Count;  % when phase 3 begins, it signals the end of phase 2 and the accumulated trial count is taken as the length of phase 2
                Count = LenPhase3;  % Reset Count to the current length of phase 3 so that the new trials would be stored after the trials of the previous session.
                Phase3_Flag = 1;
               end
            
                if(ExpLog(1,i).code == 3012) % SP_End
                 LenPhase3 = Count; % when minigame Ends, it signals the end of phase 3 and the accumulated trial count is taken as the length of phase 3
                end
            
            % Detecting the End of Phase
                        
            if(ExpLog(1,i).code == 3016)
                CuedSector = str2num(substr(ExpLog(1,i).name{1},21,1));% Gets the number of the cued sector
            end
            
            if(ExpLog(1,i).code == 3014 )% Look for event code SP_CentralStimulusSpawn
                
                Latency(Phase,Count) = ExpLog(1,i).time; % Note the Latency value
                K = i ;
                
                % Look for 3001 = SP_PeripheralStimulusResponsePressed
                %          3002 = SP_CentralStimulusResponsePressed PeripheralStimulus={inactive, active} CentralStimulus={inactive, active} Gather={inactive, active}
                %          3018 = SP_MissedCentralStimulus
                %          3012 = SP_End
                %          3009 = SP_Phase1Begin
                while i<iend && ~(ExpLog(1,i).code == 3001 || ExpLog(1,i).code== 3002 || ExpLog(1,i).code == 3018  || ExpLog(1,i).code == 3012 || ExpLog(1,i).code == 3009) % keep incrementing 'i' until one of the actions occurred.
                    i=i+1; % inv: ExpLog(1,i-1).code is not any of these [3002 3018 3012 3009]
                end
                
                %# Central Event Start ...
                if(ExpLog(1,i).code == 3018 )    % If SP_MissedCentralStimulus, then it is failure or else success
                    Test_Type(Phase,Count) = 1; Test_Type = [];     % Test Type [ Code 1: Central, 2: Peripheral ]
                    Test_Result(Phase,Count) = 2;   % Test Result [Codes 1: Success, 2:Miss,  3: False Alarm, 4: Correct Rejection, 5: Response Error ]
                    RT(Phase,Count) = ExpLog(1,i).time-ExpLog(1,K).time;
                    Sector(Phase,Count) =0;
                    Cued_Sector(Phase,Count) = CuedSector;
                    if(Sector(Phase,Count) ==Cued_Sector(Phase,Count))
                        Cued(Phase,Count) = 1;
                    else
                        Cued(Count) = 0;
                    end
                    Count = Count+1;
                    
                else if (ExpLog(1,i).code == 3002)
                        
                        Test_Type(Phase,Count) = 1;
                        Test_Result(Phase,Count) = 1;
                        RT(Phase,Count) = ExpLog(1,i).time-ExpLog(1,K).time;
                        Sector(Phase,Count) =0;
                        Cued_Sector(Phase,Count) = CuedSector;
                        if(Sector(Phase,Count) ==Cued_Sector(Phase,Count))
                            Cued(Phase,Count) = 1;
                        else
                            Cued(Phase,Count) = 0;
                        end
                        Count = Count+1;
                        
                    else if(ExpLog(1,i).code == 3001) % 3001 = SP_PeripheralStimulusResponsePressed
                            Test_Type(Phase,Count) = 1;
                            Test_Result(Phase,Count) = 5;
                            RT(Phase,Count) = ExpLog(1,i).time-ExpLog(1,K).time;
                            Sector(Phase,Count) =0;
                            Cued_Sector(Phase,Count) = CuedSector;
                            if(Sector(Phase,Count) ==Cued_Sector(Phase,Count))
                                Cued(Phase,Count) = 1;
                            else
                                Cued(Phase,Count) = 0;
                            end
                            Count = Count+1;
                        end
                    end
                end
            end
            
            %# Central Event End ...
            
            %# Peripheral Event Start ...
            
            if(ExpLog(1,i).code == 3013 ) % Look for event code SP_PeripheralStimulusSpawn
                
                Latency(Phase,Count) = ExpLog(1,i).time; % Note the Latency value
                K = i;
                Sectornum = str2num(substr(ExpLog(1,i).name{1},35,1)); % Gets the Sector Location from Event Description String
                % Gets the coordinates of the peripheral stimulus spawned to get
                % the polar coordinate value (r, theta) and absolute value of the
                % difference between the stimulus's θ and the θ that runs along the
                % centre of the cued sector (-3Pi/8, -Pi/8, Pi/8, 3Pi/8; in general the formula is
                % Sector*Pi/4 - 3Pi/8).
                % This difference is stored in the variable Distance.
                xi=strfind(ExpLog(1,i).name{1},'X=');
                yi=strfind(ExpLog(1,i).name{1},'Y=');
                ti=strfind(ExpLog(1,i).name{1},'Theta');
                pi=strfind(ExpLog(1,i).name{1},'Radial');
                X(Phase,Count)=str2num(substr(ExpLog(1,i).name{1},(xi+2),(yi-xi-2)));
                Y(Phase,Count)=str2num(substr(ExpLog(1,i).name{1},(yi+2),(ti-yi-2)));
                r(Phase,Count)=sqrt(X(Phase,Count)^2+Y(Phase,Count)^2);
                Theta(Phase,Count)=atan(Y(Phase,Count)/X(Phase,Count));
                Flag=1;
                
                if(Sectornum == CuedSector)
                    Cued(Phase,Count) = 1;
                    Distance(Phase,Count)=0;
                else
                    Cued(Phase,Count) = 0;
                    Distance(Phase,Count)=abs((CuedSector*pi/4) - (3*pi/8)- Theta(Phase,Count));
                end
                
                % Look for 3001 = SP_PeripheralStimulusResponsePressed
                %          3002 = SP_CentralStimulusResponsePressed PeripheralStimulus={inactive, active} CentralStimulus={inactive, active} Gather={inactive, active}
                %          3017 = SP_MissedPeripheralStimulus
                %          3012 = SP_End
                %          3009 = SP_Phase1Begin
                
                while i<iend && ~(ExpLog(1,i).code== 3001 || ExpLog(1,i).code== 3002 || ExpLog(1,i).code == 3017 || ExpLog(1,i).code == 3012 || ExpLog(1,i).code == 3009 ) % keep incrementing 'i' until one of the actions occurred.
                    i=i+1; % inv: ExpLog(1,i-1).code is not any of these [3001 3017 3012 3009]
                end
                
                if(ExpLog(1,i).code == 3001 ) % If player responds to peripheral stimulus, it is success otherwise failure
                    
                    if (strfind(ExpLog(1,i).name{1},'PeripheralStimulus=inactive'))
                        inactive = 1;
                    else
                        inactive = 0;
                    end
                    if(inactive ==1)
                        
                        Test_Type(Phase,Count) = 2; % Test Type [ Code 1: Central, 2: Peripheral ]
                        Test_Result(Phase,Count) = 3; % Test Result [Codes 1: Success, 2:Miss,  3: False Alarm, 4: Correct Rejection, 5: Response Error ]
                        RT(Phase,Count) = ExpLog(1,i).time-ExpLog(1,K).time;
                        Sector(Phase,Count) =Sectornum;
                        Cued_Sector(Phase,Count) = CuedSector;
                        Count = Count+1;
                    else
                        
                        Test_Type(Phase,Count) = 2;
                        Test_Result(Phase,Count) = 1;
                        RT(Phase,Count) = ExpLog(1,i).time-ExpLog(1,K).time;
                        Sector(Phase,Count) =Sectornum;
                        Cued_Sector(Phase,Count) = CuedSector;
                        Count = Count+1;
                    end
                    
                else if(ExpLog(1,i).code == 3017)
                        
                        Test_Type(Phase,Count) = 2;
                        Test_Result(Phase,Count) = 2;
                        RT(Phase,Count) = ExpLog(1,i).time-ExpLog(1,K).time;
                        Sector(Phase,Count) =Sectornum;
                        Cued_Sector(Phase,Count) = CuedSector;
                        Count = Count+1;
                        
                    else if(ExpLog(1,i).code == 3002) % 3002 = SP_CentralStimulusResponsePressed
                        
                        Test_Type(Phase,Count) = 2;
                        Test_Result(Phase,Count) = 5;
                        RT(Phase,Count) =0;
                        Sector(Phase,Count) =Sectornum;
                        Cued_Sector(Phase,Count) = CuedSector;
                        Count = Count+1;
                        end
                    end
                end
            end
            
            %# Peripheral Event End ...
            
            %# DistractorSpawn Event Start ...
            
            if(ExpLog(1,i).code == 3015 ) % Look for event code SP_DistractorSpawn
                
                Latency(Phase,Count) = ExpLog(1,i).time; % Note the Latency value
                K = i;
                Sectornum=str2num(substr(ExpLog(1,i).name{1},27,1));  % Gets the Sector Location from Event Description String
                % Gets the coordinates of the peripheral stimulus spawned to get
                % the polar coordinate value (r, theta) and absolute value of the
                % difference between the stimulus's θ and the θ that runs along the
                % centre of the cued sector (-3Pi/8, -Pi/8, Pi/8, 3Pi/8; in general the formula is
                % Sector*Pi/4 - 3Pi/8).
                % This difference is stored in the variable Distance.
                xi=strfind(ExpLog(1,i).name{1},'X=');
                yi=strfind(ExpLog(1,i).name{1},'Y=');
                ti=strfind(ExpLog(1,i).name{1},'Theta');
                pi=strfind(ExpLog(1,i).name{1},'Radial');
                X(Phase,Count)=str2num(substr(ExpLog(1,i).name{1},(xi+2),(yi-xi-2)));
                Y(Phase,Count)=str2num(substr(ExpLog(1,i).name{1},(yi+2),(ti-yi-2)));
                r(Phase,Count)=sqrt(X(Phase,Count)^2+Y(Phase,Count)^2);
                Theta(Phase,Count)=atan(Y(Phase,Count)/X(Phase,Count));
                
                if(Sectornum == CuedSector)
                    Cued(Phase,Count) = 1;
                    Distance(Phase,Count)=0;
                else
                    Cued(Phase,Count) = 0;
                    Distance(Phase,Count)=abs((CuedSector*pi/4) - (3*pi/8)- Theta(Phase,Count));
                end
                
                
                while i<iend && ~(ExpLog(1,i).code== 3001 || ExpLog(1,i).code == 3019  ) % keep incrementing 'i' until one of the actions occurred.
                    i=i+1; % inv: ExpLog(1,i-1).code is not any of these [3001 3019]
                end
                if (strfind(ExpLog(1,i).name{1},'inactive'))
                    inactive = 1;
                else
                    inactive = 0;
                end
                
                if(ExpLog(1,i).code == 3019 && inactive ==0  ) % If distractor disappears before player responds, it is success otherwise failure
                    
                    Test_Type(Phase,Count) = 2; % Test Type [ Code 1: Central, 2: Peripheral ]
                    Test_Result(Phase,Count) = 4;  % Test Result [Codes 1: Success, 2:Miss,  3: False Alarm, 4: Correct Rejection, 5: Response Error ]
                    RT(Phase,Count) = ExpLog(1,i).time-ExpLog(1,K).time;
                    Sector(Phase,Count) =Sectornum;
                    Cued_Sector(Phase,Count) = CuedSector;
                    Count = Count+1;
                    
                else
                    
                    Test_Type(Phase,Count) = 2;
                    Test_Result(Phase,Count) = 3;
                    RT(Phase,Count) = ExpLog(1,i).time-ExpLog(1,K).time;
                    Sector(Phase,Count) =Sectornum;
                    Cued_Sector(Phase,Count) = CuedSector;
                    Count = Count+1;
                    
                end
            end
            
            % SP_DistractorSpawn Event End ...
        end
        
        
        
    end
end

% Computation Part Begins ....
        
        
        
        %
        % Test_Type = [];         % 1: Central, 2: Peripheral
        % Test_Result = [];       % 1: Success, 2: Fail, 3: Miss, 4: False Alarm,
        % 5: Correct Rejection
        % RT = [];
        % Latency = [];
        % Cued = [];
        % Sector = [];
        % Cued_Sector = [];
        % X = [];
        % Y = [];
        % r = [];
        % Theta = [];
        % Difference = [];
        % Count = 1;
        % Phase = 1; % Phase No.
        
        if (Phase1_Flag == 1 )
            LenPhase1 = size(Latency(1,Latency(1,:) > 0),2);
        else
            LenPhase1 = 0;
        end
        
        if (Phase2_Flag == 1 )
            LenPhase2 = size(Latency(2,Latency(2,:) > 0),2);
        else
            LenPhase2 = 0;
        end
        
        if (Phase3_Flag == 1 )
            LenPhase3 = size(Latency(3,Latency(3,:) > 0),2);
        else
            LenPhase3 = 0;
        end
        
                
        %# Listing trial-by-trial values of Phase 1
        if (Phase1_Flag == 1 )
            fprintf(Res,'Phase 1 Listings...\n\n');
            
            fprintf(Res,'Test_Type,Test_Result,Reaction_Time(s),Event_Latency(s),Cued_or_Non-Cued,Sector_Number,Cued Sector,X,Y,r,theta,Difference \n\n');     % Prints the Headings into Result File
            
            for i = 1:LenPhase1
                % inv: Behavioural data from phase 1 trials(1..i) have been printed.
                if(Test_Type(1,i) ==1)
                    fwrite(Res,'Central');
                else
                    fwrite(Res,'Peripheral');
                end
                fprintf(Res,',');
                switch(Test_Result(1,i))
                    case 1
                        fwrite(Res,'Success,');
                    case 2
                        fwrite(Res,'Miss,');
                    case 3
                        fwrite(Res,'False Alarm,');
                    case 4
                        fwrite(Res,'Correct Rejection,');
                    case 5
                        fwrite(Res,'Response Error,');
                end
                fwrite(Res,num2str(RT(1,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Latency(1,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Cued(1,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Sector(1,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Cued_Sector(1,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(X(1,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Y(1,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(r(1,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Theta(1,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Distance(1,i)));
                fprintf(Res,'\n');
            end
            
            % Listing phase 1 values trial-by-trial end,
            
            % Computations for Phase 1 Begins ...;
            
            CuedIndex = (Cued(1,:) == 1);
            NonCuedIndex = (Cued(1,:) == 0);
            CentralIndex = (Test_Type(1,:) ==1);
            PeripheralIndex = (Test_Type(1,:)==2);
            
            CuedPeripheralIntermediate = CuedIndex+PeripheralIndex;
            NonCuedPeripheralIntermediate = NonCuedIndex+PeripheralIndex;
            
            CuedPeripheralIndex = (CuedPeripheralIntermediate == 2);
            NonCuedPeripheralIndex = (NonCuedPeripheralIntermediate == 2);
            
            RTCentral1 = RT(1,CentralIndex);
            RTCuedPeripheral1 = RT(1,CuedPeripheralIndex);
            RTNonCuedPeripheral1 = RT(1,NonCuedPeripheralIndex);
            
            fprintf(Res,'\n Mean Reaction time for Central Stimuli(Seconds) =, ');
            fprintf(Res,num2str(mean(RTCentral1)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Standard Deviation of Reaction time for Central Stimuli(Seconds) =, ');
            fprintf(Res,num2str(std(RTCentral1)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Mean Reaction time for validly Cued Peripheral Stimuli(Seconds) =, ');
            fprintf(Res,num2str(mean(RTCuedPeripheral1)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Standard Deviation of Reaction time for validly Cued Peripheral Stimuli(Seconds) = ,');
            fprintf(Res,num2str(std(RTCuedPeripheral1)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Mean Reaction time for invalidly Cued Peripheral Stimuli(Seconds) = ,');
            fprintf(Res,num2str(mean(RTNonCuedPeripheral1)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Standard Deviation of Reaction time for invalidly Cued Peripheral Stimuli(Seconds) =, ');
            fprintf(Res,num2str(std(RTNonCuedPeripheral1)));
            fprintf(Res,'\n\n\n\n');
        end
        
        % Computations for Phase 1 End ...;
        
        % Listing trial by trial values for phase 2 Begins.
        if (Phase2_Flag == 1 )
            
            fprintf(Res,'Phase 2 Listings...\n\n');
            
            fprintf(Res,'Test_Type,Test_Result,Reaction_Time(s),Event_Latency(s),Cued_or_Non-Cued,Sector_Number,Cued Sector,X,Y,r,theta,Difference \n\n');     % Prints the Headings into Result File
            
            for i = 1:LenPhase2
                % inv: Behavioural data from phase 2 trials(1..i) have been printed.
                
                if(Test_Type(2,i) ==1)
                    fwrite(Res,'Central');
                else
                    fwrite(Res,'Peripheral');
                end
                fprintf(Res,',');
                switch(Test_Result(2,i))
                    case 1
                        fwrite(Res,'Success,');
                    case 2
                        fwrite(Res,'Miss,');
                    case 3
                        fwrite(Res,'False Alarm,');
                    case 4
                        fwrite(Res,'Correct Rejection,');
                    case 5
                        fwrite(Res,'Response Error,');
                end
                fwrite(Res,num2str(RT(2,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Latency(2,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Cued(2,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Sector(2,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Cued_Sector(2,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(X(2,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Y(2,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(r(2,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Theta(2,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Distance(2,i)));
                fprintf(Res,'\n');
            end
            
            % Listing trial by trial values for phase 2  end.
            
            % Computations for Phase 2 Begin ...;
            
            CuedIndex = (Cued(2,:) == 1);
            NonCuedIndex = (Cued(2,:) == 0);
            CentralIndex = (Test_Type(2,:) ==1);
            PeripheralIndex = (Test_Type(2,:)==2);
            
            CuedPeripheralIntermediate = CuedIndex+PeripheralIndex;
            NonCuedPeripheralIntermediate = NonCuedIndex+PeripheralIndex;
            
            CuedPeripheralIndex = (CuedPeripheralIntermediate == 2);
            NonCuedPeripheralIndex = (NonCuedPeripheralIntermediate == 2);
            
            RTCentral2 = RT(2,CentralIndex);
            RTCuedPeripheral2 = RT(2,CuedPeripheralIndex);
            RTNonCuedPeripheral2 = RT(2,NonCuedPeripheralIndex);
            
            fprintf(Res,'\n Mean Reaction time for Central Stimuli(Seconds) = ,');
            fprintf(Res,num2str(mean(RTCentral2)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Standard Deviation of Reaction time for Central Stimuli(Seconds) = ,');
            fprintf(Res,num2str(std(RTCentral2)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Mean Reaction time for validly Cued Peripheral Stimuli(Seconds) = ,');
            fprintf(Res,num2str(mean(RTCuedPeripheral2)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Standard Deviation of Reaction time for validly Cued Peripheral Stimuli(Seconds) = ,');
            fprintf(Res,num2str(std(RTCuedPeripheral2)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Mean Reaction time for invalidly Cued Peripheral Stimuli(Seconds) = ,');
            fprintf(Res,num2str(mean(RTNonCuedPeripheral2)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Standard Deviation of Reaction time for invalidly Cued Peripheral Stimuli(Seconds) = ,');
            fprintf(Res,num2str(std(RTNonCuedPeripheral2)));
            fprintf(Res,'\n\n\n\n');
        end
        
        % Computations for Phase 2 End ...;
        
        % Listing trial by trial values for phase 3 Begins.
        if (Phase3_Flag == 1 )
            fprintf(Res,'Phase 3 Listings...\n\n');
            
            fprintf(Res,'Test_Type,Test_Result,Reaction_Time(s),Event_Latency(s),Cued_or_Non-Cued,Sector_Number,Cued Sector,X,Y,r,theta,Difference \n\n');     % Prints the Headings into Result Fileult File
            
            for i = 1:LenPhase3
                % inv: Behavioural data from phase 3 trials(1..i) have been printed.
                
                if(Test_Type(3,i) ==1)
                    fwrite(Res,'Central');
                else
                    fwrite(Res,'Peripheral');
                end
                fprintf(Res,',');
                switch(Test_Result(3,i))
                    case 1
                        fwrite(Res,'Success,');
                    case 2
                        fwrite(Res,'Miss,');
                    case 3
                        fwrite(Res,'False Alarm,');
                    case 4
                        fwrite(Res,'Correct Rejection,');
                    case 5
                        fwrite(Res,'Response Error,');
                end
                fwrite(Res,num2str(RT(3,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Latency(3,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Cued(3,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Sector(3,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Cued_Sector(3,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(X(3,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Y(3,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(r(3,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Theta(3,i)));
                fprintf(Res,',');
                fprintf(Res,num2str(Distance(3,i)));
                fprintf(Res,'\n');
            end
            
            % Listing trial by trial values for phase 3  end,
            
            % Computations for Phase 3 Begins ...;
            
            CuedIndex = (Cued(3,:) == 1);
            NonCuedIndex = (Cued(3,:) == 0);
            CentralIndex = (Test_Type(3,:) ==1);
            PeripheralIndex = (Test_Type(3,:)==2);
            
            CuedPeripheralIntermediate = CuedIndex+PeripheralIndex;
            NonCuedPeripheralIntermediate = NonCuedIndex+PeripheralIndex;
            
            CuedPeripheralIndex = (CuedPeripheralIntermediate == 2);
            NonCuedPeripheralIndex = (NonCuedPeripheralIntermediate == 2);
            
            RTCentral3 = RT(3,CentralIndex);
            RTCuedPeripheral3 = RT(3,CuedPeripheralIndex);
            RTNonCuedPeripheral3 = RT(3,NonCuedPeripheralIndex);
            
            fprintf(Res,'\n Mean Reaction time for Central Stimuli(Seconds) = ,');
            fprintf(Res,num2str(mean(RTCentral3)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Standard Deviation of Reaction time for Central Stimuli(Seconds) = ,');
            fprintf(Res,num2str(std(RTCentral3)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Mean Reaction time for validly Cued Peripheral Stimuli(Seconds) = ,');
            fprintf(Res,num2str(mean(RTCuedPeripheral3)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Standard Deviation of Reaction time for validly Cued Peripheral Stimuli(Seconds) = ,');
            fprintf(Res,num2str(std(RTCuedPeripheral3)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Mean Reaction time for invalidly Cued Peripheral Stimuli(Seconds) = ,');
            fprintf(Res,num2str(mean(RTNonCuedPeripheral3)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Standard Deviation of Reaction time for invalidly Cued Peripheral Stimuli(Seconds) = ,');
            fprintf(Res,num2str(std(RTNonCuedPeripheral3)));
            fprintf(Res,'\n\n\n\n');
        end
        
        % Computations for Phase 3 End ...;
        
       
        
        % Computations for Phase 2 & 3 pooled Begins ...;
        
        if (Phase2_Flag == 1 && Phase3_Flag == 1 )
            
            fprintf(Res,'Phase 2 & 3 Pooled Computations Listings...\n\n');     % Prints the Headings into Result Fileult File
            RTCentral4 = [RTCentral2 RTCentral3];
            RTCuedPeripheral4 = [RTCuedPeripheral2 RTCuedPeripheral3];
            RTNonCuedPeripheral4 = [RTNonCuedPeripheral2 RTNonCuedPeripheral3];
            
            fprintf(Res,'\n Mean Reaction time(Sec) for Central Stimuli(Seconds) = ,');
            fprintf(Res,num2str(mean(RTCentral4)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Standard Deviation of Reaction time for Central Stimuli(Seconds) = ,');
            fprintf(Res,num2str(std(RTCentral4)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Mean Reaction time for validly Cued Peripheral Stimuli(Seconds) = ,');
            fprintf(Res,num2str(mean(RTCuedPeripheral4)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Standard Deviation of Reaction time for validly Cued Peripheral Stimuli(Seconds) = ,');
            fprintf(Res,num2str(std(RTCuedPeripheral4)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Mean Reaction time for invalidly Cued Peripheral Stimuli(Seconds) = ,');
            fprintf(Res,num2str(mean(RTNonCuedPeripheral4)));
            fprintf(Res,'\n');
            
            fprintf(Res,'\n Standard Deviation of Reaction time for invalidly Cued Peripheral Stimuli (Seconds)= ,');
            fprintf(Res,num2str(std(RTNonCuedPeripheral4)));
            fprintf(Res,'\n\n\n\n');
        end
        
        % Computations for Phase 2 & 3 pooled End ...;
        
        % Phase 1 Tallies calculations and print in .csv file
        
%          if (Phase1_Flag == 1 )
%             CuedIndex = (Cued(1,:) == 1);
%             NonCuedIndex = (Cued(1,:) == 0);
%             CentralIndex = (Test_Type(1,:) ==1);
%             PeripheralIndex = (Test_Type(1,:)==2);
%             
%             CuedPeripheralIntermediate = CuedIndex+PeripheralIndex;
%             NonCuedPeripheralIntermediate = NonCuedIndex+PeripheralIndex;
%             
%             CuedPeripheralIndex = (CuedPeripheralIntermediate == 2);
%             NonCuedPeripheralIndex = (NonCuedPeripheralIntermediate == 2);
%             % Cued D'
%             
%             CuedSuccess1 = sum(Test_Result(1,CuedPeripheralIndex) ==1);            
%             CuedMiss1 = sum(Test_Result(1,CuedPeripheralIndex) ==2);
%             CuedFalseAlarm1 = sum(Test_Result(1,CuedPeripheralIndex) ==3);
%             CuedCorrectRejection1 = sum(Test_Result(1,CuedPeripheralIndex) ==4);
%             CuedResponseError1 = sum(Test_Result(1,CuedPeripheralIndex) ==5);
%             
%             % Printing tallies to .csv file
%             fprintf(Res,'\nTallies (Cued) for Phase 2 \n');
%             
%             fprintf(Res,'Hits, ');
%             fprintf(Res,num2str(CuedSuccess1));
%             fprintf(Res,'\n');
%             
%             fprintf(Res,'Misses, ');
%             fprintf(Res,num2str(CuedMiss1));
%             fprintf(Res,'\n');
%             
%             fprintf(Res,'Correct Rejection, ');
%             fprintf(Res,num2str(CuedCorrectRejection1));
%             fprintf(Res,'\n');
% 
%             fprintf(Res,'False Alarm, ');
%             fprintf(Res,num2str(CuedFalseAlarm1));
%             fprintf(Res,'\n');
%             
%             fprintf(Res,'Response Errors, ');
%             fprintf(Res,num2str(CuedResponseError1));
%             fprintf(Res,'\n');
%             
%          end
        
        % D Prime Calculations Begin ...
        
        % Phase 2 D' Begins ...
        if (Phase2_Flag == 1 )
            CuedIndex = (Cued(2,:) == 1);
            NonCuedIndex = (Cued(2,:) == 0);
            CentralIndex = (Test_Type(2,:) ==1);
            PeripheralIndex = (Test_Type(2,:)==2);
            
            CuedPeripheralIntermediate = CuedIndex+PeripheralIndex;
            NonCuedPeripheralIntermediate = NonCuedIndex+PeripheralIndex;
            
            CuedPeripheralIndex = (CuedPeripheralIntermediate == 2);
            NonCuedPeripheralIndex = (NonCuedPeripheralIntermediate == 2);
            % Cued D'
            
            CuedSuccess2 = sum(Test_Result(2,CuedPeripheralIndex) ==1);            
            CuedMiss2 = sum(Test_Result(2,CuedPeripheralIndex) ==2);
            CuedFalseAlarm2 = sum(Test_Result(2,CuedPeripheralIndex) ==3);
            CuedCorrectRejection2 = sum(Test_Result(2,CuedPeripheralIndex) ==4);
            CuedResponseError2 = sum(Test_Result(2,CuedPeripheralIndex) ==5);
            
            % Printing tallies to .csv file
            fprintf(Res,'\nTallies (Cued) for Phase 2 \n');
            
            fprintf(Res,'Hits, ');
            fprintf(Res,num2str(CuedSuccess2));
            fprintf(Res,'\n');
            
            fprintf(Res,'Misses, ');
            fprintf(Res,num2str(CuedMiss2));
            fprintf(Res,'\n');
            
            fprintf(Res,'Correct Rejection, ');
            fprintf(Res,num2str(CuedCorrectRejection2));
            fprintf(Res,'\n');

            fprintf(Res,'False Alarm, ');
            fprintf(Res,num2str(CuedFalseAlarm2));
            fprintf(Res,'\n');
            
            fprintf(Res,'Response Errors, ');
            fprintf(Res,num2str(CuedResponseError2));
            fprintf(Res,'\n');
            
            % if any parameter is Zero ( = 0 ), increase it by 1
            
            if(CuedSuccess2 ==0)
                CuedSuccess2 = 1;
            end
            if(CuedMiss2 ==0)
                CuedMiss2 = 1;
            end
            if(CuedFalseAlarm2 ==0)
                CuedFalseAlarm2 = 1;
            end
            if(CuedCorrectRejection2 ==0)
                CuedCorrectRejection2 = 1;
            end
            
            CuedHitRate2 = CuedSuccess2/(CuedSuccess2+CuedMiss2);
            CuedFalseAlarmRate2 = CuedFalseAlarm2/(CuedFalseAlarm2+CuedCorrectRejection2);
            
            CuedDPrime2 = icdf('Normal',CuedHitRate2,0,1) - icdf('Normal',CuedFalseAlarmRate2,0,1);
            

            
            fprintf(Res,'\n Cued D Prime Estimate for Phase 2,  ');
            fprintf(Res,num2str(CuedDPrime2));
            fprintf(Res,'\n');
            
            % Non Cued D'
            
            NonCuedSuccess2 = sum(Test_Result(2,NonCuedPeripheralIndex) ==1);
            NonCuedMiss2 = sum(Test_Result(2,NonCuedPeripheralIndex) ==2);
            NonCuedFalseAlarm2 = sum(Test_Result(2,NonCuedPeripheralIndex) ==3);
            NonCuedCorrectRejection2 = sum(Test_Result(2,NonCuedPeripheralIndex) ==4);
            NonCuedResponseError2 = sum(Test_Result(2,NonCuedPeripheralIndex) ==5);
  
            % Printing tallies to .csv file

            fprintf(Res,'\n Tallies (NonCued) for Phase 2 \n');
            
            fprintf(Res,'Hits, ');
            fprintf(Res,num2str(NonCuedSuccess2));
            fprintf(Res,'\n');
            
            fprintf(Res,'Misses, ');
            fprintf(Res,num2str(NonCuedMiss2));
            fprintf(Res,'\n');
            
            fprintf(Res,'Correct Rejection, ');
            fprintf(Res,num2str(NonCuedCorrectRejection2));
            fprintf(Res,'\n');

            fprintf(Res,'False Alarm, ');
            fprintf(Res,num2str(NonCuedFalseAlarm2));
            fprintf(Res,'\n');
            
            fprintf(Res,'Response Errors, ');
            fprintf(Res,num2str(NonCuedResponseError2));
            fprintf(Res,'\n');
            
            % if any parameter is Zero ( = 0 ), increase it by 1
            
            if(NonCuedSuccess2 ==0)
                NonCuedSuccess2 = 1;
            end
            if(NonCuedMiss2 ==0)
                NonCuedMiss2 = 1;
            end
            if(NonCuedFalseAlarm2 ==0)
                NonCuedFalseAlarm2 = 1;
            end
            if(NonCuedCorrectRejection2 ==0)
                NonCuedCorrectRejection2 = 1;
            end
            
            NonCuedHitRate2 = NonCuedSuccess2/(NonCuedSuccess2+NonCuedMiss2);
            NonCuedFalseAlarmRate2 = NonCuedFalseAlarm2/(NonCuedFalseAlarm2+NonCuedCorrectRejection2);
            
            NonCuedDPrime2 = icdf('Normal',NonCuedHitRate2,0,1) - icdf('Normal',NonCuedFalseAlarmRate2,0,1);
            
            % Write into output .csv file
            

          
            fprintf(Res,'\n NonCued D Prime Estimate for Phase 2,  ');
            fprintf(Res,num2str(NonCuedDPrime2));
            fprintf(Res,'\n');
            
        end
        % Phase 2 D' End ...
        
        % Phase 3 D' Begins ...
        if (Phase3_Flag == 1 )
            
            CuedIndex = (Cued(3,:) == 1);
            NonCuedIndex = (Cued(3,:) == 0);
            CentralIndex = (Test_Type(3,:) ==1);
            PeripheralIndex = (Test_Type(3,:)==2);
            
            CuedPeripheralIntermediate = CuedIndex+PeripheralIndex;
            NonCuedPeripheralIntermediate = NonCuedIndex+PeripheralIndex;
            
            CuedPeripheralIndex = (CuedPeripheralIntermediate == 2);
            NonCuedPeripheralIndex = (NonCuedPeripheralIntermediate == 2);
            % Cued D'
            
            CuedSuccess3 = sum(Test_Result(3,CuedPeripheralIndex) ==1);
            CuedMiss3 = sum(Test_Result(3,CuedPeripheralIndex) ==2);
            CuedFalseAlarm3 = sum(Test_Result(3,CuedPeripheralIndex) ==3);
            CuedCorrectRejection3 = sum(Test_Result(3,CuedPeripheralIndex) ==4);
            CuedResponseError3 = sum(Test_Result(3,CuedPeripheralIndex) ==5);
            
            % Printing tallies to .csv file
            
            fprintf(Res,'\n Tallies (Cued) for Phase 3 \n');
            
            fprintf(Res,'Hits, ');
            fprintf(Res,num2str(CuedSuccess3));
            fprintf(Res,'\n');
            
            fprintf(Res,'Misses, ');
            fprintf(Res,num2str(CuedMiss3));
            fprintf(Res,'\n');
            
            fprintf(Res,'Correct Rejection, ');
            fprintf(Res,num2str(CuedCorrectRejection3));
            fprintf(Res,'\n');

            fprintf(Res,'False Alarm, ');
            fprintf(Res,num2str(CuedFalseAlarm3));
            fprintf(Res,'\n');   
            
            fprintf(Res,'Response Errors, ');
            fprintf(Res,num2str(CuedResponseError3));
            fprintf(Res,'\n');
            
            % if any parameter is Zero ( = 0 ), increase it by 1
            
            if(CuedSuccess3 ==0)
                CuedSuccess3 = 1;
            end
            if(CuedMiss3 ==0)
                CuedMiss3 = 1;
            end
            if(CuedFalseAlarm3 ==0)
                CuedFalseAlarm3 = 1;
            end
            if(CuedCorrectRejection3 ==0)
                CuedCorrectRejection3 = 1;
            end
            
            CuedHitRate3 = CuedSuccess3/(CuedSuccess3+CuedMiss3);
            CuedFalseAlarmRate3 = CuedFalseAlarm3/(CuedFalseAlarm3+CuedCorrectRejection3);
            
            CuedDPrime3 = icdf('Normal',CuedHitRate3,0,1) - icdf('Normal',CuedFalseAlarmRate3,0,1);
            
             % Write into output .csv file
                         
       
            
            fprintf(Res,'\n Cued D Prime Estimate for Phase 3,  ');
            fprintf(Res,num2str(CuedDPrime3));
            fprintf(Res,'\n');
            
            
            % Non Cued D'
            
            NonCuedSuccess3 = sum(Test_Result(3,NonCuedPeripheralIndex) ==1);
            NonCuedMiss3 = sum(Test_Result(3,NonCuedPeripheralIndex) ==2);
            NonCuedFalseAlarm3 = sum(Test_Result(3,NonCuedPeripheralIndex) ==3);
            NonCuedCorrectRejection3 = sum(Test_Result(3,NonCuedPeripheralIndex) ==4);
            NonCuedResponseError3 = sum(Test_Result(3,NonCuedPeripheralIndex) ==5);
            % Write into output .csv file
            
            % Printing tallies to .csv file
            fprintf(Res,'\n Tallies (NonCued) for Phase 3 \n');
            
            fprintf(Res,'Hits, ');
            fprintf(Res,num2str(NonCuedSuccess3));
            fprintf(Res,'\n');
            
            fprintf(Res,'Misses, ');
            fprintf(Res,num2str(NonCuedMiss3));
            fprintf(Res,'\n');
            
            fprintf(Res,'Correct Rejection, ');
            fprintf(Res,num2str(NonCuedCorrectRejection3));
            fprintf(Res,'\n');

            fprintf(Res,'False Alarm, ');
            fprintf(Res,num2str(NonCuedFalseAlarm3));
            fprintf(Res,'\n');
          
            fprintf(Res,'Response Errors, ');
            fprintf(Res,num2str(NonCuedResponseError3));
            fprintf(Res,'\n');

            
            % if any parameter is Zero ( = 0 ), increase it by 1
            
            if(NonCuedSuccess3 ==0)
                NonCuedSuccess3 = 1;
            end
            if(NonCuedMiss3 ==0)
                NonCuedMiss3 = 1;
            end
            if(NonCuedFalseAlarm3 ==0)
                NonCuedFalseAlarm3 = 1;
            end
            if(NonCuedCorrectRejection3 ==0)
                NonCuedCorrectRejection3 = 1;
            end
            
            NonCuedHitRate3 = NonCuedSuccess3/(NonCuedSuccess3+NonCuedMiss3);
            NonCuedFalseAlarmRate3 = NonCuedFalseAlarm3/(NonCuedFalseAlarm3+NonCuedCorrectRejection3);
            
            NonCuedDPrime3 = icdf('Normal',NonCuedHitRate3,0,1) - icdf('Normal',NonCuedFalseAlarmRate3,0,1);
            
            fprintf(Res,'\n NonCued D Prime Estimate for Phase 3,  ');
            fprintf(Res,num2str(NonCuedDPrime3));
            fprintf(Res,'\n');
            
            % Phase 3 D' End ...
            
  
            
        end
        % D Prime Calculations End ...
        
        % Calculations for Multiple Regression for RT, r and Difference Begin ...
        
        
        if (Phase1_Flag == 1 && Phase2_Flag == 1 && Phase3_Flag == 1)
            Pooled_RT = [RT(1,1:LenPhase1)'; RT(2,1:LenPhase2)'; RT(3,1:LenPhase3)'];
            Pooled_r =  [r(1,1:LenPhase1)'; r(2,1:LenPhase2)'; r(3,1:LenPhase3)'];
            Pooled_Difference =  [Distance(1,1:LenPhase1)'; Distance(2,1:LenPhase2)'; Distance(3,1:LenPhase3)'];
        elseif (Phase1_Flag == 1 && Phase2_Flag == 1)
            Pooled_RT = [RT(1,1:LenPhase1)'; RT(2,1:LenPhase2)'];
            Pooled_r =  [r(1,1:LenPhase1)'; r(2,1:LenPhase2)'];
            Pooled_Difference =  [Distance(1,1:LenPhase1)'; Distance(2,1:LenPhase2)'];
        else
            Pooled_RT = RT(1,1:LenPhase1)';
            Pooled_r =  r(1,1:LenPhase1)';
            Pooled_Difference =  Distance(1,1:LenPhase1)';
        end

        
        
        % The multiple regression returns a p-by-1 vector b1 of coefficient estimates for a 
        % multiple regression of the responses in Pooled_RT on the predictors in
        % Pooled_r. Pooled_r is an n-by-p matrix of p predictors at each of n observations. 
        % y is an n-by-1 vector of observed responses. It also returns 
        % p-by-2 matrix bint of 95% confidence intervals for the coefficient
        % estimates. The first column of bint1 contains lower confidence bounds
        % for each of the p coefficient estimates (the second column contains
        % upper confidence bounds) and residuals r1. n-by-2 matrix rint1 of
        % intervals can be used to diagnose outliers. 
        % If the interval rint1(i,:) for observation i does not contain zero,
        % the corresponding residual is larger than expected in 95% of new 
        % observations, suggesting an outlier. 1-by-4 vector stats1 that contains,
        % in order, the R^2 statistic, the F statistic and its p value, 
        % and an estimate of the error variance.
        % b2, bint2, r2, rint2 and stats2 are corresponding terms for the
        % multilple regression of the responses in Pooled_RT on the
        % predictors in Pooled_Difference.
       
        
        [b1,bint1,r1,rint1,stats1]= regress(Pooled_RT,[ones(length(Pooled_r),1) Pooled_r]);
        [b2,bint2,r2,rint2,stats2]= regress(Pooled_RT,[ones(length(Pooled_Difference),1) Pooled_Difference]);
        
        %b=b(b~=0);
        
        % Writing into .csv file
        
        fprintf(Res,'\n multiple regression coefficient of RT Vs stimulus"s r (its distance from fixation),  ');
        fprintf(Res,num2str(b1(2)));
        fprintf(Res,'\n');
            
        fprintf(Res,'\n R^2 statistic for the multiple regression RT Vs stimulus"s r,  ');
        fprintf(Res,num2str(b1(1)));
        fprintf(Res,'\n');
        
        fprintf(Res,'\n F statistic for the multiple regression RT Vs stimulus"s r,  ');
        fprintf(Res,num2str(stats1(2)));
        fprintf(Res,'\n');
        
        fprintf(Res,'\n p value for the F statistic for the multiple regression RT Vs stimulus"s r,  ');
        fprintf(Res,num2str(stats1(3)));
        fprintf(Res,'\n');
        
        fprintf(Res,'\n multiple regression coefficient of RT Vs difference (absolute value of the difference between the');
        fprintf(Res,'stimulus"s theta and the theta that runs along the centre of the cued sector),  ');
        fprintf(Res,num2str(b2(2)));
        fprintf(Res,'\n');
        
        fprintf(Res,'\n R^2 statistic for the multiple regression RT Vs difference,  ');
        fprintf(Res,num2str(b2(1)));
        fprintf(Res,'\n');
        
        fprintf(Res,'\n F statistic for the multiple regression RT Vs difference,  ');
        fprintf(Res,num2str(stats2(2)));
        fprintf(Res,'\n');
        
        fprintf(Res,'\n p value for the F statistic for the multiple regression RT Vs difference,  ');
        fprintf(Res,num2str(stats2(3)));
        fprintf(Res,'\n');
        
        % Calculations for Multiple Regression for RT, r and Difference End ...
        
        fclose(Res);
        
        % Computations part End ...
        
        % Constructing SPBehData structure and assigining values
        
        SPBehData = struct('Test_Type',0,'Test_Result',0,'RT',0,'Cued',0,'Sector',0,'Cued_Sector',0,'X',0,'Y',0,'r',0,'Theta',0,'Distance',0);
        
        SPBehData.Test_Type = Test_Type;        % Test Type [ Code 1: Central, 2: Peripheral ]
        SPBehData.Test_Result = Test_Result;    % Test Result [Codes 1: Success, 2:Miss,  3: False Alarm, 4: Correct Rejection, 5: Response Error ]
        SPBehData.RT = RT;                      % Reaction Times
        SPBehData.Latency = Latency;            % Latency
        SPBehData.Cued = Cued;                  % Cued/NonCued event indicator [Code 1:Cued 0:NonCued]
        SPBehData.Sector = Sector;              % Sector of Stimuli
        SPBehData.Cued_Sector = Cued_Sector;    % Indicator whether sector is cued or noncued.[Code 1:Cued 0:NonCued]
        SPBehData.X = X;                        % X co-ordinate of the stimulus
        SPBehData.Y = Y;                        % Y co-ordinate of the stimulus
        SPBehData.r = r;                        % Radius of the stimulus
        SPBehData.Theta = Theta;                % Angle (Theta) of the stimulus
        SPBehData.Distance = Distance;          % Distance of stimulus from the center
        
        % Note: each variable will be in 3 x N array format where row
        % indicates phase of the game (e.g. phase 1,2 or 3) and N indicate
        % the number of test events.
        
        Output = strcat('The Results of SP minigame have been saved at: ',filepath);
        
end